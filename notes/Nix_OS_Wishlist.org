#+title: NixOS Wishlist

Maybe this is the way to learn NixOS: just a bunch of research beforehand to start to understand where to find things, how to piece them together, etc.

This is me trying to do that so I can have a smoother switch.

Started as a small list but I guess this is also now a log of me trying to make everything happen.

* Automatic Updates
Ideally: as easy or easier than on Fedora, meaning I don't really want to have to make my own systemd service or somesuch.
snippet from: https://nixos.wiki/wiki/Automatic_system_upgrades

#+begin_src nix
system.autoUpgrade = {
  enable = true;
  flake = inputs.self.outPath;
  flags = [
    "--update-input"
    "nixpkgs"
    "-L" # print build logs
  ];
  dates = "02:00";
  randomizedDelaySec = "45min";
};
#+end_src

* Data Backups
Again, at least as easy as usual (create systemd service), but would be really cool if it were embedded in my config and "just worked" after that.

This is HUGE: I had no idea about this, even despite using Nix for a few weeks before lol...
** NixOS Options: https://search.nixos.org/options
So you can search the options that are available in nix files. So I want to backup my system...let's search ==backup==. There are lots of options, but what I am hoping for appears: ==services.restic.backups== !

Similarly, if you search ==system update==, you can find your way to ==system.autoUpgrade==.

Example from: https://felschr.com/blog/nixos-restic-backups

#+begin_src nix
services.restic.backups.full = {
  initialize = true;
  repository = "SOME-REPO";
  timeConfig.OnCalendar = "daily";
  paths = [ "/etc/nixos" "/var/lib/" "/home" ];
  extraBackupArgs = let
    ignorePatterns = [
      "/var/lib/systemd"
      "/var/lib/containers"
      "/var/lib/flatpak"
      "/home/*/.local/share/Trash"
      "/home/*/.cache"
      "/home/*/Downloads"
      "/home/*/.npm"
      "/home/*/Games"
      "/home/*/.local/share/containers"
      "/home/felschr/dev" # backup ~/dev-backup instead
      ".cache"
      ".tmp"
      ".log"
      ".Trash"
    ];
    ignoreFile = builtins.toFile "ignore"
      (foldl (a: b: a + "\n" + b) "" ignorePatterns);
  in [ "--exclude-file=${ignoreFile}" ];
  pruneOpts = [
    "--keep-daily 7"
    "--keep-weekly 4"
    "--keep-monthly 3"
    "--keep-yearly 1"
  ];
};

#+end_src

* VPN Config
Would be nice for autoconnect and reconnect to work well.

*** Let's see where we get if we search NixOS Options for it...
Search param: ==wireguard==

==networking.wireguard.enable== might be what I want, but it has a note that ==systemd.network.netdevs== is better maintained and should be used instead.

*** Interesting...I'm just going to look for an example.
Example blog post: https://alberand.com/nixos-wireguard-vpn.html

Example from the NixOS wiki @ https://nixos.wiki/wiki/WireGuard:
**** This example uses wg-quick, but like the above blog mentions, there are options that use NetworkManager or systemd-networkd
#+begin_src nix
{
  ...
  networking.wg-quick.interfaces = {
    wg0 = {
      address = [ "10.0.0.2/24" "fdc9:281f:04d7:9ee9::2/64" ];
      dns = [ "10.0.0.1" "fdc9:281f:04d7:9ee9::1" ];
      privateKeyFile = "/root/wireguard-keys/privatekey";

      peers = [
        {
          publicKey = "{server public key}";
          presharedKeyFile = "/root/wireguard-keys/preshared_from_peer0_key";
          allowedIPs = [ "0.0.0.0/0" "::/0" ];
          endpoint = "{server ip}:51820";
          persistentKeepalive = 25;
        }
      ];
    };
  };
  ...
}
#+end_src
* General system config:
** Window Manager + Bar + Rofi
** Packages
** Flatpak and Snaps?
** Emacs
** Fish
** Starship prompt and/or fish prompt plugin
** PATH?
Not sure how this will play out.
** Fonts
** Term emulator (kitty)
I found this site--MyNixOS--which has some documentation, including the home-manager options for kitty.
My config is super simple so this should work great. There's also a section to just add text that will be added to kitty.conf.
https://mynixos.com/home-manager/option/programs.kitty.settings

---

* Reviving My NixOS-Testing VM
** Testing:
*** Attempt @ cloning my config (-> VM)
- Had to get git installed
- sudo rm -rf'd the /etc/nixos folder
- Ran ==nixos-generate-config== to get the hardware config file
- Copied all the files but hardwareconfig into the /etc/nixos folder and ran ==nixos-rebuild switch==

**** How to see the name you should use when building system from flake:
==nix show flake /etc/nixos==
My config is called ==nixos-testing==
then I could build with this syntax: ==nixos-rebuild switch --flake /etc/nixos#nixos-testing==

**** systemd-boot/EFI issue in VM
Think this is because of the systemd-boot line from copied config. Oops. Not finding a clear answer to this, cutting my losses and switching to bare metal on a PC that I will actually run Nix on.

* Bare-Metal (again)
Found a post and copied some of the config after starting fresh from a GNOME install.
Super helpful! Sway is finally working. https://gist.github.com/kborling/76805ade81ac5bfdd712df294208c878

* Configuring for real:
First thing I had to do was change the $term var in sway's config file to kitty, from foot. I thought it was broken until I got into /etc/sway and realized. In hindsight I should have just installed foot at first and then removed it so I would at least have been able to open a terminal.
1. Starting a git repo locally, so I can track changes without bothering with signing in for now to be able to push.
2. I'm going to pull down my dotfiles first.
3. Installing Stow
4. Got dotfiles for bash, kitty, sway, rofi, and waybar restored.
5. Added Rec Mono font. Also it's quite nice that nerdfonts is just a package. So basically all the monospace fonts I want are already here.
6. Edited package list a bit more and switched out Firefox in favor of Brave.

   Stopping here for now.

* Status
** Update 2024-06-08
Kind of starting over with the standard config here: https://github.com/Misterio77/nix-starter-configs/blob/main/standard/nixos/configuration.nix

*** Next steps:
**** TODO Install Emacs + Configure
This is a big one.
Have seen advice to just install it and use doom script imperatively later.
Added emacs to my package list...unsure about doom part still. I am going to proceed with home-manager first.
*I can enable programs.emacs and services.emacs via HomeManager*
**** TODO Config for laptop and desktop
The most sane way to do this for me feels like: just configure them separately using a similar base, then i can 'factor out' the common stuff and merge them. Otherwise it's just another big question that I have to look into rather than just getting started again.
**** TODO Configure Fish as Interactive Shell
This I did by using the users.users.gigi.shell option:
=shell = pkgs.fish;=
**** TODO Auto-system/package updates
https://search.nixos.org/options?channel=23.11&show=system.autoUpgrade.enable&from=0&size=50&sort=relevance&type=packages&query=system+upgrade
searching the options...there's a channel option. I should set this to unstable, but I want to also /install/ from unstable too.
**** TODO Enable Home Manager/Switch from configuration.nix to starter config
Interestingly I am back to the channel problem. I have to enable a repo as a channel with the name home-manager..hm.
So I have to figure out how to declare both =nixpkgs unstable= and =home-manager= channels
- Managed to do the home-manager one.
Don't know how I'm supposed to know the state version used unless i use 23.11, so I'm using that one.
Does home-manager replace users.users.gigi? No idea.

***** Okay, starting overish cause I am confused.
Goal/method: enable Home-manager as a NixOS module. So I must do this: https://nix-community.github.io/home-manager/index.xhtml#sec-install-nixos-module
AND because I want/need to use flakes, I will also do this: https://discourse.nixos.org/t/set-up-nixos-home-manager-via-flake/29710/2

I found a blog post and I guess I kind of have to do this? Which might mean that I can set up channels, or at least inputs for my setup declaratively? I think I will still set the channels with the commands. Something to ask about--what's the best practice.
#+begin_src nix
inputs = {
  nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  home-manager.url = "github:nix-community/home-manager";
  home-manager.inputs.nixpkgs.follows = "nixpkgs";
};
#+end_src
https://drakerossman.com/blog/how-to-add-home-manager-to-nixos#how-to-add-home-manager-to-your-system
⬆️ this is where the discourse link above comes in. instead of declaring  homemanager stuff in flake.nix directly, I can use this line to declare it in a home.nix file instead.
=home-manager.users.jdoe = import ./home.nix;=
I now feel like the best thing to do may be to just start with the 'standard' config here: https://github.com/Misterio77/nix-starter-configs/blob/main/standard/nixos/configuration.nix

**** TODO Configure VPN Autoconnect/Auto-reconnect
ensureProfiles might be the way: https://nixos.org/manual/nixos/stable/options#opt-networking.networkmanager.ensureProfiles.profiles
**** DONE Switch to unstable channel
Normal way: (see examples) https://nix.dev/manual/nix/2.22/command-ref/nix-channel
Declarative: Oddly, it's not that easy to just declare the channel you wnat to use. There's a SO post explaining something that worked though. Question https://stackoverflow.com/questions/48831392/how-to-add-nixos-unstable-channel-declaratively-in-configuration-nix
- I am going to leave this for now, but I need to use:
  - nixpkgs unstable
  - nixos unstable

**** TODO Sway Config
Currently I have to log into a tty and then manually start sway.
***** I would like a greeter + autostart.
***** I have no idea if swayidle works rn.
***** Swaylock is fine for now but I would prefer either something else or to customize it so it isn't blinding white lol
***** Sway windows have no gaps. That's not how it is on my laptop so it's something to look into.
**** TODO Install Zig?
Nvim complained about not having a C compiler, installing zig is usually my move lol.
**** KILL Set Brave as default browser?
Appears to be something I need Home Manager for.
Might actually switch back to FF if it has a better configuration story, which it looks like it does on Nix/Home Manager.
**** TODO Install More Programs (potentially more complex)
- Docker
- VS Code
- Logseq
- Freetube
- Bitwarden
- 1Password
  + 1Password CLI/SSH Agent

**** HOLD Install Vagrant...can I customize the provider (vmware?)
**** HOLD Install Docker
**** TODO Set up restic backups
**** TODO Wallpaper?
Find a way to get a decent wallpaper automatically configured.
Probly need home manager.
example:
https://github.com/nmasur/dotfiles/blob/b282e76be4606d9f2fecc06d2dc8e58d5e3514be/flake.nix#L38-L42

**** DONE Set Kitty theme
I made a kitty.nix module and import that into home.nix
**** TODO Modules for specific programs:
- firefox
- fish
- nvim
- emacs?
- coreutils/utlities i expect
- fonts

**** TODO SSH config
* Roadmap
Start with HM and flakes right off the bat. Document what i think is the easiest path and what i learn in here...then clean up and produce a coherent version of this document

---
* Documentation/Blog Posts
I think there are a few main things:
- I would like to show a full diff of what i'm discussing adding each time somehow
- nix-shell for access to vim early on
- Explain config file format/lang
- Enable flakes and home manager first, go from there

---

* Install Notes
** Choices:
I'm going to use Budgie on my desktop since I like it, and I will keep my laptop on Sway.
Desktop first.
** Steps:
*** Run thru install
*** Use nix-shell to get access to vim for easier config on sway/minimal install
*** Init starter config
** Errors:
*** I ran nixos-rebuild and got a systemd oom service start error, and it doesn't seem to have built any of the things i configured..
Now it doesn't error but still, when i rebuild i just get nothing. No sway, no fish, etc.
I think this is because configuration.nix is the original.
Okay, i have made a lot of edits but i still can't get the home-manager config to "apply". Still no actual errors from flake.nix each time i try.
May be because i'm using "standalone" approach and not module? https://discourse.nixos.org/t/flake-not-running-home-manager/22863/3
https://nix-community.github.io/home-manager/index.xhtml#sec-install-nixos-module

Once i followed the config here it started to work and I just had some issues to sort out.
https://nixos-and-flakes.thiscute.world/nixos-with-flakes/start-using-home-manager

*** Complaint: a lot of things seem to happen and then error out. Isn't the point of the functional language, etc., so that these things are caught before hand?
*** Made a new flake and kept getting 'kitty.nix' not found -- it wasn't added to the git repo.
*** Annoyance: sudo/user ownership...can i take ownership of the /etc/nixos dir?
**** TODO look into best ways of managing the config files.
** Results after first session (Laptop):
After more nix-frustration, I finally have it 'cracked' and can move ahead faster with finishing configuration.
There are some niggles, like: what do I want to use dotfiles for, what do I want to turn into nix-based configuration?
At any rate, I can launch sway and I have defaults on everything. Sway does not launch automatically, and everything is still really barebones.
- I mostly need:
  - To configure sway and friends
  - Finish installing programs
  - Configure/fine-tune other program configs
  - Configure automation/services
Also, small note. Helix is probably the nicest editor to use with a minimal nix install--neovim doesn't really support the nix format out of the box, helix does. I think i'll recommend it just for that. I do have a helix.nix now because of this very reason. Honestly might bite the bullet and just use it over neovim personally.
