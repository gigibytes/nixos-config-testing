#+title: NixOS Wishlist

Maybe this is the way to learn NixOS: just a bunch of research beforehand to start to understand where to find things, how to piece them together, etc.

This is me trying to do that so I can have a smoother switch.

Started as a small list but I guess this is also now a log of me trying to make everything happen.

* Automatic Updates
Ideally: as easy or easier than on Fedora, meaning I don't really want to have to make my own systemd service or somesuch.
snippet from: https://nixos.wiki/wiki/Automatic_system_upgrades

#+begin_src nix
system.autoUpgrade = {
  enable = true;
  flake = inputs.self.outPath;
  flags = [
    "--update-input"
    "nixpkgs"
    "-L" # print build logs
  ];
  dates = "02:00";
  randomizedDelaySec = "45min";
};
#+end_src

* Data Backups
Again, at least as easy as usual (create systemd service), but would be really cool if it were embedded in my config and "just worked" after that.

This is HUGE: I had no idea about this, even despite using Nix for a few weeks before lol...
** NixOS Options: https://search.nixos.org/options
So you can search the options that are available in nix files. So I want to backup my system...let's search ==backup==. There are lots of options, but what I am hoping for appears: ==services.restic.backups== !

Similarly, if you search ==system update==, you can find your way to ==system.autoUpgrade==.

Example from: https://felschr.com/blog/nixos-restic-backups

#+begin_src nix
services.restic.backups.full = {
  initialize = true;
  repository = "SOME-REPO";
  timeConfig.OnCalendar = "daily";
  paths = [ "/etc/nixos" "/var/lib/" "/home" ];
  extraBackupArgs = let
    ignorePatterns = [
      "/var/lib/systemd"
      "/var/lib/containers"
      "/var/lib/flatpak"
      "/home/*/.local/share/Trash"
      "/home/*/.cache"
      "/home/*/Downloads"
      "/home/*/.npm"
      "/home/*/Games"
      "/home/*/.local/share/containers"
      "/home/felschr/dev" # backup ~/dev-backup instead
      ".cache"
      ".tmp"
      ".log"
      ".Trash"
    ];
    ignoreFile = builtins.toFile "ignore"
      (foldl (a: b: a + "\n" + b) "" ignorePatterns);
  in [ "--exclude-file=${ignoreFile}" ];
  pruneOpts = [
    "--keep-daily 7"
    "--keep-weekly 4"
    "--keep-monthly 3"
    "--keep-yearly 1"
  ];
};

#+end_src

* VPN Config
Would be nice for autoconnect and reconnect to work well.

*** Let's see where we get if we search NixOS Options for it...
Search param: ==wireguard==

==networking.wireguard.enable== might be what I want, but it has a note that ==systemd.network.netdevs== is better maintained and should be used instead.

*** Interesting...I'm just going to look for an example.
Example blog post: https://alberand.com/nixos-wireguard-vpn.html

Example from the NixOS wiki @ https://nixos.wiki/wiki/WireGuard:
**** This example uses wg-quick, but like the above blog mentions, there are options that use NetworkManager or systemd-networkd
#+begin_src nix
{
  ...
  networking.wg-quick.interfaces = {
    wg0 = {
      address = [ "10.0.0.2/24" "fdc9:281f:04d7:9ee9::2/64" ];
      dns = [ "10.0.0.1" "fdc9:281f:04d7:9ee9::1" ];
      privateKeyFile = "/root/wireguard-keys/privatekey";

      peers = [
        {
          publicKey = "{server public key}";
          presharedKeyFile = "/root/wireguard-keys/preshared_from_peer0_key";
          allowedIPs = [ "0.0.0.0/0" "::/0" ];
          endpoint = "{server ip}:51820";
          persistentKeepalive = 25;
        }
      ];
    };
  };
  ...
}
#+end_src
* General system config:
** Window Manager + Bar + Rofi
** Packages
** Flatpak and Snaps?
** Emacs
** Fish
** Starship prompt and/or fish prompt plugin
** PATH?
Not sure how this will play out.
** Fonts
** Term emulator (kitty)
I found this site--MyNixOS--which has some documentation, including the home-manager options for kitty.
My config is super simple so this should work great. There's also a section to just add text that will be added to kitty.conf.
https://mynixos.com/home-manager/option/programs.kitty.settings

---

* Reviving My NixOS-Testing VM
** Testing:
*** Attempt @ cloning my config (-> VM)
- Had to get git installed
- sudo rm -rf'd the /etc/nixos folder
- Ran ==nixos-generate-config== to get the hardware config file
- Copied all the files but hardwareconfig into the /etc/nixos folder and ran ==nixos-rebuild switch==

**** How to see the name you should use when building system from flake:
==nix show flake /etc/nixos==
My config is called ==nixos-testing==
then I could build with this syntax: ==nixos-rebuild switch --flake /etc/nixos#nixos-testing==

**** systemd-boot/EFI issue in VM
Think this is because of the systemd-boot line from copied config. Oops. Not finding a clear answer to this, cutting my losses and switching to bare metal on a PC that I will actually run Nix on.

* Bare-Metal (again)
Found a post and copied some of the config after starting fresh from a GNOME install.
Super helpful! Sway is finally working. https://gist.github.com/kborling/76805ade81ac5bfdd712df294208c878

* Configuring for real:
First thing I had to do was change the $term var in sway's config file to kitty, from foot. I thought it was broken until I got into /etc/sway and realized. In hindsight I should have just installed foot at first and then removed it so I would at least have been able to open a terminal.
1. Starting a git repo locally, so I can track changes without bothering with signing in for now to be able to push.
2. I'm going to pull down my dotfiles first.
3. Installing Stow
4. Got dotfiles for bash, kitty, sway, rofi, and waybar restored.
5. Added Rec Mono font. Also it's quite nice that nerdfonts is just a package. So basically all the monospace fonts I want are already here.
6. Edited package list a bit more and switched out Firefox in favor of Brave.

   Stopping here for now.

* Status
Currently the system is barebones but in a state closer to what I am looking for. I'm sure there's a couple dozen more things to do though.
** Next steps:
*** TODO Install Emacs + Configure
This is a big one.
Have seen advice to just install it and use doom script imperatively later.
Added emacs to my package list...unsure about doom part still. I am going to proceed with home-manager first.
*** DONE Configure Fish as Interactive Shell
This I did by using the users.users.gigi.shell option:
=shell = pkgs.fish;=
*** HOLD Auto-system/package updates
searching the options...there's a channel option. I should set this to unstable, but I want to also /install/ from unstable too.

*** TODO Configure VPN Autoconnect/Auto-reconnect
May just be a matter of config'ing the systemd service i have now, will check the links i saved.
Disconnecting is less necessary/important because it's pretty rare, I can do it manually for now.
*** STRT Switch to unstable channel
Oddly, it's not that easy to just declare the channel you wnat to use. There's a SO post explaining something that worked though. Question 48831392
*** TODO Improve Sway Config
Currently I have to log into a tty and then manually start sway.
**** I would like a greeter + autostart.
**** I have no idea if swayidle works rn.
**** Swaylock is fine for now but I would prefer either something else or to customize it so it isn't blinding white lol
**** Sway windows have no gaps. That's not how it is on my laptop so it's something to look into.
*** DONE Install Zig?
Nvim complained about not having a C compiler, installing zig is usually my move lol.
*** HOLD Set Brave as default browser?
Appears to be something I need Home Manager for.
Might actually switch back to FF if it has a better configuration story, which it looks like it does on Nix/Home Manager.
*** DONE Install More Programs (potentially more complex)
- Docker
- VS Code
- Logseq
- Freetube
- Bitwarden
- 1Password
  + 1Password CLI/SSH AgentVagrant
*** HOLD Install Vagrant...can I customize the provider (vmware?)
*** TODO Install More Utils
- Programs like ==locate== aren't present on the system, maybe I have to install coreutils?

*** HOLD Wallpaper?
Find a way to get a decent wallpaper automatically configured.
Probly need home manager.
*** HOLD Set Kitty theme
Home manager again: programs.kitty.theme

* Roadmap
Do everything like a basic bitch in configuration.nix (as far as possible) -> Start using home-manager -> Enable flakes -> Modularize config into flakes


---
